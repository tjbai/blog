---
interface Task {
  id: number;
  content: string;
  timestamp: string;
  status: 'todo' | 'staged' | 'pushed';
  comments?: {
    id: number;
    content: string;
    timestamp: string;
  }[];
}

interface Props {
  tasks: {
    todo: Task[];
    stage: Task[];
    done: Task[];
  };
  pageTitle?: string;
  timestamp?: string;
}

const { tasks, pageTitle = "记", timestamp = new Date().toLocaleString() } = Astro.props;
---

<div class="page">
  <div class="page-header" data-section>
    <span class="arrow">▼</span>{pageTitle} #0
    <span class="timestamp">{timestamp}</span>
  </div>
  <div class="page-content">
    <div class="section">
      <div class="section-header" data-section>
        <span class="arrow">▼</span>
        <span class="section-title todo">todo</span>
        <span class="task-count">({tasks.todo.length})</span>
      </div>
      <div class="section-content">
        {tasks.todo.map(task => (
          <div class="task">
            <span class="task-id">{task.id}</span>
            <span class="task-content todo">{task.content}</span>
            <span class="timestamp">{task.timestamp}</span>
          </div>
        ))}
      </div>
    </div>

    <div class="section">
      <div class="section-header" data-section>
        <span class="arrow">▼</span>
        <span class="section-title stage">stage</span>
        <span class="task-count">({tasks.stage.length})</span>
      </div>
      <div class="section-content">
        {tasks.stage.map(task => (
          <div class="task">
            <span class="task-id">{task.id}</span>
            <span class="task-content staged">{task.content}</span>
            <span class="timestamp">{task.timestamp}</span>
          </div>
        ))}
      </div>
    </div>

    <div class="section">
      <div class="section-header" data-section>
        <span class="arrow">▼</span>
        <span class="section-title done">done</span>
        <span class="task-count">({tasks.done.length})</span>
      </div>
      <div class="section-content">
        {tasks.done.map(task => (
          <>
            <div class="task">
              <span class="task-id">{task.id}</span>
              <span class="task-content pushed">{task.content}</span>
              <span class="timestamp">{task.timestamp}</span>
            </div>
            {task.comments && (
              <div class="comments">
                {task.comments.map(comment => (
                  <div class="task">
                    <span class="task-id">{comment.id}</span>
                    <span class="task-content dim">{comment.content}</span>
                    <span class="timestamp">{comment.timestamp}</span>
                  </div>
                ))}
              </div>
            )}
          </>
        ))}
      </div>
    </div>
  </div>
</div>

<style>
:root {
  --width: 900px;
  --bg-color: #1a1b1e;
  --text-color: #c4c7c5;
  --dim-color: #808080;
  --todo-color: #98C379;
  --stage-color: #E5C07B;
  --done-color: #E06C75;
  --font-scale: 1em;
}

.page {
  font-size: var(--font-scale);
  margin: 2rem auto;
  padding: 20px;
  max-width: var(--width);
  text-align: left;
  background-color: var(--bg-color);
  word-wrap: break-word;
  line-height: 1.6;
  color: var(--text-color);
  margin-bottom: 3em;
}

.page-header {
  display: flex;
  align-items: center;
  margin-bottom: 1em;
  cursor: pointer;
  user-select: none;
}

.section {
  margin: 0.5em 0 0.5em 1.5em;
  padding-left: 1em;
  border-left: 1px solid var(--dim-color);
}

.section-header {
  color: var(--dim-color);
  margin: 1em 0;
  cursor: pointer;
  user-select: none;
}

.task {
  display: flex;
  align-items: flex-start;
  margin: 0.5em 0;
  padding-left: 1.5em;
}

.task-id {
  color: var(--dim-color);
  margin-right: 1em;
  min-width: 2em;
  text-align: right;
}

.todo { color: var(--todo-color); }
.staged { color: var(--stage-color); }
.pushed { color: var(--done-color); }

.comments {
  margin: 0.3em 0 0.3em 3em;
  color: var(--dim-color);
  font-size: 0.9em;
}

.dim { color: var(--dim-color); }

.timestamp {
  color: var(--dim-color);
  font-size: 0.9em;
  margin-left: auto;
  padding-left: 2em;
}

.collapsed { display: none; }

.arrow {
  display: inline-block;
  transition: transform 0.2s;
  margin-right: 0.5em;
  color: var(--dim-color);
}

.arrow.collapsed { transform: rotate(-90deg); }

.section-title {
  display: inline-block;
  min-width: 5em;
}

.section-title.todo { color: var(--todo-color) }
.section-title.stage { color: var(--stage-color) }
.section-title.done { color: var(--done-color) }

.task-content { flex: 1; }
</style>

<script>
document.querySelectorAll('[data-section]').forEach(element => {
  element.addEventListener('click', () => {
    const content = element.nextElementSibling;
    const arrow = element.querySelector('.arrow');

    if (content.classList.contains('collapsed')) {
      content.classList.remove('collapsed');
      arrow.classList.remove('collapsed');
    } else {
      content.classList.add('collapsed');
      arrow.classList.add('collapsed');
    }
  });
});
</script>
